// MEMO
class Solution {
    static int knapsack(int W, int val[], int wt[]) {
        // code here
        
        int n = val.length;
        
        //MEMo
        int [][] memo = new int[n+1][W+1];
        // Arrays.stream(memo).forEach(row -> Arrays.fill(row,-1));
        for(int i = 0 ; i <= n ; i ++)
        {
            for(int j =0 ; j <= W ; j++)
            {
                memo[i][j] = -1;
            }
        }
        
        return ans(n,W,val,wt,memo);
        
        
    }
    
    public static int ans(int n , int W , int val[], int wt[], int memo[][]){
        
        if(W == 0 || n ==0 )
        return 0;
        
        if(memo[n][W] != -1)
        return memo[n][W];
        
        if(wt[n-1] <= W )
        return memo[n][W] = Integer.max(val[n-1] + ans(n-1, W - wt[n-1], val , wt, memo),ans(n-1, W , val , wt, memo));
        
        else 
        return memo[n][W] = ans(n-1, W , val , wt, memo);
        
    }
    
}


//Tabulation
